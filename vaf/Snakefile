# Run line

import os, sys

##--------------------------------------------------##
## GLOBAL

configfile: '../config.json'
localrules: create_readCountTableCurrent, create_readCountTableCompiled

# Sample ids
TISSUES_ALL, = glob_wildcards(os.path.join(config['projectDir'], config['mutationCountDir']['map'], '{tissue,\w+}'))

#TISSUES_ALL = TISSUES_ALL[0:1]
TISSUES = list(set(TISSUES_ALL))
TISSUES_NOEXO = TISSUES.copy()

if 'Whole_Blood_EXO' in TISSUES_NOEXO:
    TISSUES_NOEXO.remove('Whole_Blood_EXO')
    
print(TISSUES_NOEXO)

# For eqtl rules

##--------------------------------------------------##


##--------------------------------------------------##
## PIPELINE

rule all:
    input: 
        #Expression association selection
        #expand(os.path.join(config['projectDir'], 'vaf', 'expression_association_selection', '{phenotype_var}', '{tissue}', 'significant.txt.gz'), phenotype_var=['Missense', 'Nonsense'], tissue=TISSUES_NOEXO),
        #expand(os.path.join(config['projectDir'], 'vaf', 'expression_association_clonality', '{phenotype_var}', '{tissue}', 'significant.txt.gz'), phenotype_var=['vaf', 'vaf_corrected'], tissue=TISSUES_NOEXO),
        ##GWAS eqtl plots
        expand(os.path.join(config['projectDir'], 'vaf', '{gwas_type}_eqtl', '{phenotype_var}', '{tissue}', 'done.txt'), zip, gwas_type=['gwas_clonality', 'gwas_clonality', 'gwas_selection', 'gwas_selection'] * len(TISSUES_NOEXO), phenotype_var=['vaf', 'vaf_corrected', 'Missense', 'Nonsense'] * len(TISSUES_NOEXO), tissue=sorted(TISSUES_NOEXO*4))
        #GWAS clonality 
        #expand(os.path.join(config['projectDir'], 'vaf', 'gwas_clonality', '{phenotype_var}', '{tissue}_pvals.txt'), phenotype_var=['vaf', 'vaf_corrected'], tissue=TISSUES_NOEXO),
        #####GWAS selection
        #expand(os.path.join(config['projectDir'], 'vaf', 'gwas_selection', '{phenotype_var}', '{tissue}_pvals.txt'), phenotype_var=['Missense', 'Nonsense'], tissue=TISSUES_NOEXO)
        #os.path.join(config['projectDir'], config['mutationCountDir']['root'], '1_final_tables', 'all_mutations_annotated.txt'),
        #os.path.join(config['projectDir'], config['mutationCountDir']['root'], '1_final_tables', 'metadata.txt')

rule create_tables:
    input:
        mutation_map = os.path.join(config['projectDir'], config['projectDir'], 'supp_info', 'tables', 'Table_mutations_all.tsv.gzip.temp.original'),
        annotated_mut_file = os.path.join(config['projectDir'], config['cancer']['root'], 'dndsout_tissuesMerged_all', '1_all_mutations_annotated_dnds.txt.gz'),
        cancer_mutation_dir = os.path.join(config['projectDir'], config['cancer']['root'], 'cosmica_mutations', 'map/')
    params:
        'n6_0.0_0.7'
    output:
        os.path.join(config['projectDir'], config['mutationCountDir']['root'], '1_final_tables', 'all_mutations_annotated.txt'),
        os.path.join(config['projectDir'], config['mutationCountDir']['root'], '1_final_tables', 'metadata.txt')
    shell:
        '''
        ml R/3.4.0
        cd R
        Rscript create_mutation_map_metadata.R {input} {params} {output}
        '''


#----------------------------------------------------------------
# expression association  rules
rule expression_association_selection:
    input:
        mutation_map = os.path.join(config['projectDir'], config['mutationCountDir']['root'], '1_final_tables', 'all_mutations_annotated.txt'), 
        metadata = os.path.join(config['projectDir'], config['mutationCountDir']['root'], '1_final_tables', 'metadata.txt')
    params:
        tissue = '{tissue}',
        phenotype_var = '{phenotype_var}',
        pval = '0.05',
        out_sig = os.path.join(config['projectDir'], 'vaf', 'expression_association_selection', '{phenotype_var}', '{tissue}', 'significant.txt.gz'),
        out_non_sig = os.path.join(config['projectDir'], 'vaf', 'expression_association_selection', '{phenotype_var}', '{tissue}', 'non_significant.txt.gz'),
        out_GO = os.path.join(config['projectDir'], 'vaf', 'expression_association_selection', '{phenotype_var}', '{tissue}', 'GO_results.txt'),
        out_plots = os.path.join(config['projectDir'], 'vaf', 'expression_association_selection', '{phenotype_var}', '{tissue}', 'plots/')
    output:
        os.path.join(config['projectDir'], 'vaf', 'expression_association_selection', '{phenotype_var}', '{tissue}', 'significant.txt.gz')
    shell:
        '''
        ml R/3.4.0
        cd R
        Rscript expression_association_selection.R {input} {params}
        '''
        
rule expression_association_clonality:
    input:
        mutation_map = os.path.join(config['projectDir'], config['mutationCountDir']['root'], '1_final_tables', 'all_mutations_annotated.txt'), 
        metadata = os.path.join(config['projectDir'], config['mutationCountDir']['root'], '1_final_tables', 'metadata.txt')
    params:
        tissue = '{tissue}',
        phenotype_var = '{phenotype_var}',
        pval = '0.05',
        out_sig = os.path.join(config['projectDir'], 'vaf', 'expression_association_clonality', '{phenotype_var}', '{tissue}', 'significant.txt.gz'),
        out_non_sig = os.path.join(config['projectDir'], 'vaf', 'expression_association_clonality', '{phenotype_var}', '{tissue}', 'non_significant.txt.gz'),
        out_GO = os.path.join(config['projectDir'], 'vaf', 'expression_association_clonality', '{phenotype_var}', '{tissue}', 'GO_results.txt'),
        out_plots = os.path.join(config['projectDir'], 'vaf', 'expression_association_clonality', '{phenotype_var}', '{tissue}', 'plots/')
    output:
        os.path.join(config['projectDir'], 'vaf', 'expression_association_clonality', '{phenotype_var}', '{tissue}', 'significant.txt.gz')
    shell:
        '''
        ml R/3.4.0
        cd R
        Rscript expression_association_clonality.R {input} {params}
        '''
        
#----------------------------------------------------------------
# GWAS  rules
 
rule gwas_clonality:
    input:
        mutation_map = os.path.join(config['projectDir'], config['mutationCountDir']['root'], '1_final_tables', 'all_mutations_annotated.txt'), 
        metadata = os.path.join(config['projectDir'], config['mutationCountDir']['root'], '1_final_tables', 'metadata.txt'),
        vcf_file = config['vcfFileCommon']
    params:
        perms = '1000',
        tissue = '{tissue}',
        phenotype_var = '{phenotype_var}'
    output:
        os.path.join(config['projectDir'], 'vaf', 'gwas_clonality', '{phenotype_var}', '{tissue}_pvals.txt')
    shell:
        '''
        ml R/3.4.0
        ml mariadb
        cd R
        Rscript gwas_clonality.R {input} {params} {output}
        '''

rule gwas_selection:
    input:
        mutation_map = os.path.join(config['projectDir'], config['mutationCountDir']['root'], '1_final_tables', 'all_mutations_annotated.txt'), 
        metadata = os.path.join(config['projectDir'], config['mutationCountDir']['root'], '1_final_tables', 'metadata.txt'),
        vcf_file = config['vcfFileCommon']
    params:
        perms = '1000',
        tissue = '{tissue}',
        phenotype_var = '{phenotype_var}'
    output:
        os.path.join(config['projectDir'], 'vaf', 'gwas_selection', '{phenotype_var}', '{tissue}_pvals.txt')
    shell:
        '''
        ml R/3.4.0
        ml mariadb
        cd R
        Rscript gwas_selection.R {input} {params} {output}
        '''

rule gwas_hit_eqlt:
    input:
        mutation_map = os.path.join(config['projectDir'], config['mutationCountDir']['root'], '1_final_tables', 'all_mutations_annotated.txt'), 
        gwas_results = os.path.join(config['projectDir'], 'vaf', '{gwas_type}', '{phenotype_var}', '{tissue}_pvals.txt'),
        vcf_file = config['vcfFileCommon']
    params:
        phenotype_var = '{phenotype_var}',
        tissue = '{tissue}',
        extend_region = '2e6',
        out_prefix = os.path.join(config['projectDir'], 'vaf', '{gwas_type}_eqtl', '{phenotype_var}', '{tissue}/')
    output:
        os.path.join(config['projectDir'], 'vaf', '{gwas_type}_eqtl', '{phenotype_var}', '{tissue}', 'done.txt')
    shell:
        '''
        ml R/3.4.0
        ml mariadb
        cd R
        
        signif='{params.out_prefix}/signif_gwas_snps.txt'
        
        # Get list of gwas signif snps 
        sort -k9g {input.gwas_results} | awk -v OFS='\\t' '{{if($9 < 0.05) print}}' | cut -f1 > $signif
        
        if [ -s $signif ]
        then
            Rscript gwas_hits_eqtl.R {params.out_prefix}/signif_gwas_snps.txt {input.mutation_map} {input.vcf_file} {params}
            echo DONE > {output}
        else
            echo no_results > {output}
        fi
        '''
        
        
