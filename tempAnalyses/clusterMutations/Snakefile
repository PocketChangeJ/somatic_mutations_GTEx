# Run line

import sys, os


##--------------------------------------------------##
## GLOBAL

configfile: "../../config.json"
TISSUES = "Whole_Blood"
MAF = "n6_0.0_0.5"

WORKING_DIR = os.path.join(config["projectDir"], "clusterCombinations")

# Sample ids
SAMPLES, = glob_wildcards(os.path.join(config["projectDir"], config["mutationCountDir"]["root"], "filtered", TISSUES, MAF, '{sample,\w+}.txt'))

#SAMPLES = SAMPLES[1:2]
#SAMPLES = ["SRR1071931"]

# COMMENT THIS if you get tissues and MAF from folder names 
TISSUES = [TISSUES] * len(SAMPLES)
MAF = [MAF] * len(SAMPLES)
# FINISH COMMENTING here


clusterLengths = [10, 25, 50, 100, 150, 200, 250]
nMutations = [2, 3, 4, 5, 6, 7, 8]

SAMPLES_ALL = []
TISSUES_ALL = []
MAF_ALL = []
CLUS_LEN = []
N_MUT = []
for i in range(len(SAMPLES)):
    for cLength in clusterLengths:
        for nMut in nMutations:
            SAMPLES_ALL.append(SAMPLES[i])
            TISSUES_ALL.append(TISSUES[i])
            MAF_ALL.append(MAF[i])
            CLUS_LEN.append(cLength)
            N_MUT.append(nMut)
            
            #print("{:<20s}{:<20s}{:<15s}{:<5d}{:<5d}".format(SAMPLES_ALL[-1], TISSUES_ALL[-1], MAF_ALL[-1], CLUS_LEN[-1], N_MUT[-1]))
            


##--------------------------------------------------##


##--------------------------------------------------##
## PIPELINE

rule all:
    input: 
        # Get median distance lengths for all cluster definition
        #expand(os.path.join(WORKING_DIR, "distanceStats", "{tissue}", "{maf}", "{sample}_length={clustSize}_nMuts={nMut}.txt"), zip, tissue = TISSUES_ALL, maf = MAF_ALL, sample = SAMPLES_ALL, clustSize = CLUS_LEN, nMut = N_MUT)
        # Get positions with informative depth
        #expand(os.path.join(WORKING_DIR, "baseDepth", "{tissue}", "{sample}.txt"), tissue = set(TISSUES), sample = set(SAMPLES))
        # Get expected median distance lengths for all cluster definition
        #expand(os.path.join(WORKING_DIR, "distanceStatsExpected", "{tissue}", "{maf}", "{sample}_length={clustSize}_nMuts={nMut}.txt"), zip, tissue = TISSUES_ALL, maf = MAF_ALL, sample = SAMPLES_ALL, clustSize = CLUS_LEN, nMut = N_MUT),
        # Get median distance lengths for all cluster definitions
        #expand(os.path.join(WORKING_DIR, "distanceStats", "{tissue}", "{maf}", "{sample}_length={clustSize}_nMuts={nMut}.txt"), zip, tissue = TISSUES_ALL, maf = MAF_ALL, sample = SAMPLES_ALL, clustSize = CLUS_LEN, nMut = N_MUT)
        # Get context and count maps
        #expand(os.path.join(WORKING_DIR, "context",  '{tissue}', '{maf}', '{sample}_length={clustSize}_nMuts={nMut}.txt'), zip, tissue = TISSUES_ALL, maf = MAF_ALL, sample = SAMPLES_ALL, clustSize = CLUS_LEN, nMut = N_MUT)
        # Get C-to-T ratios of CpG vs non-CpG
        expand(os.path.join(WORKING_DIR, "C_to_T_ratios",  '{tissue}', '{maf}', '{sample}_length={clustSize}_nMuts={nMut}.txt'), zip, tissue = TISSUES_ALL, maf = MAF_ALL, sample = SAMPLES_ALL, clustSize = CLUS_LEN, nMut = N_MUT)
        
        
        
    shell:
        '''
        echo hola
        '''

rule add_filterToMutations:
    input: 
        os.path.join(config["projectDir"], config["mutationCountDir"]["root"], "filtered", "{tissue}", "{maf}", "{sample}.txt")
    params:
        lambda wildcards: wildcards.clustSize,
        lambda wildcards: wildcards.nMut,
        "clustMutTest"
    output: 
        # Append all filters
        os.path.join(WORKING_DIR, "filtered", "{tissue}", "{maf}", "{sample}_length={clustSize}_nMuts={nMut}.txt")
        
    shell:
        '''
        module load anaconda3
        python3 ../../mutationCalling/python/filterAppend_clusterMutations.py {input} {params} > {output}
        '''

rule filter_mutations:
    input:
        os.path.join(WORKING_DIR, "filtered", "{tissue}", "{maf}", "{sample}_length={clustSize}_nMuts={nMut}.txt")
    output:
        os.path.join(WORKING_DIR, "map",  '{tissue}', '{maf}', '{sample}_length={clustSize}_nMuts={nMut}.txt')
    shell:
        """
        awk -v FS="\\t" -v OFS="\\t" '{{if ($8 == "PASS" || $8 == "clustered_mutation") print $0}}' < {input} | cut -f-7 > {output}
        """
        
        
rule get_medianDistance:
    input:
        os.path.join(WORKING_DIR, "map",  '{tissue}', '{maf}', '{sample}_length={clustSize}_nMuts={nMut}.txt')
    output:
        os.path.join(WORKING_DIR, "distanceStats", "{tissue}", "{maf}", "{sample}_length={clustSize}_nMuts={nMut}.txt")
    shell:
        """
        module load R/3.4.0
        Rscript ../../generalMutationAnalyses/R/mutationDistanceAverage.R {input} {output}
        """

rule get_positions_with_informative_depth:
    input:
        os.path.join(config["mappingDir"], "{tissue}", "{sample}_RmdupSortedAligned.out.bam")
    params:
        seqQual = config["seqQualityCutoff"],
        coverage = config["coverageCutoff"]
    output:
        os.path.join(WORKING_DIR, "baseDepth", "{tissue}", "{sample}.txt")
    shell:
        '''
        samtools depth -q {params.seqQual} -d 0 {input} | awk -v FS="\\t" -v OFS="\\t" '{{if ($3 >= {params.coverage}) print $0}}' > {output}
        '''

rule get_expectedMedianDistance:
    input:
        mutationFile = os.path.join(WORKING_DIR, "map",  '{tissue}', '{maf}', '{sample}_length={clustSize}_nMuts={nMut}.txt'),
        depthFile =  os.path.join(WORKING_DIR, "baseDepth", "{tissue}", "{sample}.txt")
    params:
        permutations = 1000
    output:
        os.path.join(WORKING_DIR, "distanceStatsExpected", "{tissue}", "{maf}", "{sample}_length={clustSize}_nMuts={nMut}.txt")
    shell:
        '''
        module load R/3.4.0
        # Get mutation number
        nMut=$(awk -v i=0 '{{i++}} END{{print i}}' {input.mutationFile})
        cd R 
        Rscript randomMutationDistanceAverage.R {input.depthFile} $nMut {params} {output}
        '''
        
rule create_contextAndCounts:
    input:
        os.path.join(WORKING_DIR, "map",  '{tissue}', '{maf}', '{sample}_length={clustSize}_nMuts={nMut}.txt')
    params:
        contextLength = 3
    output:
        os.path.join(WORKING_DIR, "count",  '{tissue}', '{maf}', '{sample}_length={clustSize}_nMuts={nMut}.txt'),
        os.path.join(WORKING_DIR, "context",  '{tissue}', '{maf}', '{sample}_length={clustSize}_nMuts={nMut}.txt')
    shell:
        '''
        module load R/3.4.0
        Rscript ../../mutationCalling/R/printCountsContext_fromMap.R {params} {input} {output}
        '''

rule get_CtoT_ratios_CpG:
    input:
        os.path.join(WORKING_DIR, "context",  '{tissue}', '{maf}', '{sample}_length={clustSize}_nMuts={nMut}.txt')
    output:
        os.path.join(WORKING_DIR, "C_to_T_ratios",  '{tissue}', '{maf}', '{sample}_length={clustSize}_nMuts={nMut}.txt')
    shell:
        '''
        module load R/3.4.0
        Rscript ../../generalMutationAnalyses/R/mutations_CtoT_CpG_over_CtoT_nonCpG.R {input} {output}
        '''

#-------------------------------------------
# RULEs to separate cluster vs non-clustered mutations
# Once mutations have been called and a filter column has been appended
rule all:
    input:
        expand(os.path.join(WORKING_DIR, "cluster", 'mutationCount', 'count', '{tissue}', '{maf}', '{sample}.txt'), zip, tissue = TISSUES, maf = MAF, sample =  SAMPLES)), 
        expand(os.path.join(WORKING_DIR, "nonCluster", 'mutationCount', 'count', '{tissue}', '{maf}', '{sample}.txt'), zip, tissue = TISSUES, maf = MAF, sample =  SAMPLES))

rule 
