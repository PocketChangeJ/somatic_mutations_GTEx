

import os 

##--------------------------------------------------##
## GLOBAL

configfile: "../config.json"
localrules: all

## BAM available 
TISSUES, SAMPLES, = glob_wildcards(os.path.join(config["mappingDir"], '{tissue,\w+}', '{sample,\w+}_RmdupSortedAligned.out.bam'))

## Pileup available
Spileups = {}
for root, dirs, files in os.walk(os.path.join(config["scratchDir"], "pileups")):
    for file in files:
        if file.endswith(".txt"):
              Spileups[os.path.splitext(file)[0]] = True

Tn = []
Sn = []
for i in range(len(TISSUES)):
    if TISSUES[i] != "Spleen":
        if SAMPLES[i] in Spileups:
            Tn.append(TISSUES[i])
            Sn.append(SAMPLES[i])

TISSUES = Tn
SAMPLES = Sn
    
##--------------------------------------------------##


##--------------------------------------------------##
## PIPELINE

rule all:
    input: 
        # ADD bcf filters
        expand(os.path.join(config["scratchDir"],  config["pileupDir"], "{tissue}", "{sample}.txt"), zip, tissue = TISSUES, sample = SAMPLES)
        # Create depth bed
        ancient(expand(os.path.join(config["scratchDir"],  "depth_bam", "{tissue}", "{sample}.bed.gzip"), zip, tissue = TISSUES, sample = SAMPLES))
        
rule create_coverageMaps:
    input:
        os.path.join(config["mappingDir"], '{tissue}', '{sample}_RmdupSortedAligned.out.bam')
    params:
        seqQual = int(config["seqQualityCutoff"]) - 1,
        coverage = config["coverageCutoff"],
        tempDir = os.path.join(config["scratchDir"], config["tempDir"])
    output:
        os.path.join(config["scratchDir"], 'depth_bam', '{tissue}', '{sample}.bed.gzip')
    shell:
        '''
        samtools depth -q {params.seqQual} -d 0 {input} | awk -v FS="\\t" -v OFS="\\t" '{{if ($3 >= {params.coverage}) print $1 "\\t" $2 "\\t" $2 + 1 "\\tNA\\t" $3 "\\t*" }}' | sort -k 1,1 -k2,2n | gzip --best -c > {output}
        '''

rule addFilters_mutationPileup:
    input: 
        pileup = os.path.join(config["scratchDir"], "pileupsNoFilterStats", "{tissue}", "{sample}.txt"),
        bam = os.path.join(config["mappingDir"], '{tissue}', '{sample}_RmdupSortedAligned.out.bam'),
        bamIndex = os.path.join(config["mappingDir"], '{tissue}', '{sample}_RmdupSortedAligned.out.bam.bai')
    params:
        baseQualityCutoff = config["seqQualityCutoff"]
        
    output:
        os.path.join(config["scratchDir"],  config["pileupDir"], "{tissue}", "{sample}.txt")
    
    shell:
        '''
        module load anaconda3
        module load bcftools/1.9
        
        awk -v FS="\\t" -v OFS="\\t" '{{$2=$2 "\\t" $2; print $0}}' {input.pileup} | sort -k1,1 -k2,2n > {config[scratchDir]}/{config[tempDir]}/{wildcards.sample}.no_filters
        
        
        # Append false-positive probabilities if file is not empty
        if [ -s  {config[scratchDir]}/{config[tempDir]}/{wildcards.sample}.no_filters ]
        then
        
            bcftools mpileup -B --skip-indels --min-BQ {params.baseQualityCutoff} --max-depth 50000 --ignore-RG -T {config[scratchDir]}/{config[tempDir]}/{wildcards.sample}.no_filters --fasta-ref {config[genomeFasta]} {input.bam} > {config[scratchDir]}/{config[tempDir]}/{wildcards.sample}.vcf
            
            bcftools query -f '%CHROM\\t%POS\\t%POS\\t[%INFO/VDB]\\t[%INFO/RPB]\\t[%INFO/MQB]\\t[%INFO/BQB]\\t[%INFO/MQSB]\\n' {config[scratchDir]}/{config[tempDir]}/{wildcards.sample}.vcf | sort -k1,1 -k2,2n > {config[scratchDir]}/{config[tempDir]}/{wildcards.sample}.stats
            
            rm {config[scratchDir]}/{config[tempDir]}/{wildcards.sample}.vcf
            
            bedtools intersect -sorted -f 1 -wa -wb -a {config[scratchDir]}/{config[tempDir]}/{wildcards.sample}.no_filters -b {config[scratchDir]}/{config[tempDir]}/{wildcards.sample}.stats | cut -f3,12,13,14 --complement > {output}
            
            rm {config[scratchDir]}/{config[tempDir]}/{wildcards.sample}.stats
            
        else
        
            mv  {config[scratchDir]}/{config[tempDir]}/{wildcards.sample}.no_filters {output}
            
        fi
        
        
        rm {config[scratchDir]}/{config[tempDir]}/{wildcards.sample}.no_filters
        '''
