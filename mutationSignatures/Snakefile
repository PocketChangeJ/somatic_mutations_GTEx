# IMPORTAN, to re-run all rm the following files
# config["tempDir"]/individualSignaturesDone.txt
# config["tempDir"]/consensusSignaturesDone.txt
# 

import os
from time import gmtime, strftime

#resource.setrlimit(resource.RLIMIT_AS, (7000 * 1048576, -1))


##--------------------------------------------------##
## GLOBAL

configfile: "../config.json"
localrules: download_cancerSignatures, create_consensusSignatures, create_mutationMatrix, all, all_individualSignatures, all_consensusSignatures, all_tSNE, all_reverse_signature_finding

# Sample ids
TISSUES, MAF, SAMPLES, = glob_wildcards(os.path.join(config["projectDir"], config["mutationCountDir"]["context"], '{tissue,\w+}', '{maf, .+}', '{sample,\w+}.txt'))
TISSUES = set(TISSUES)
TISSUES.remove("Whole_Blood_EXO")
MAF = set(MAF)


##--------------------------------------------------##


##--------------------------------------------------##
## PIPELINE

# NOTE: Uncoment in the input for 'all' rule to run a specific analysis

rule all:
    input: 
        #Kucab signatures
        #os.path.join(config["scratchDir"], config["tempDir"], "kucabSignaturesDone.txt")
        ## ALL ANALYSES
        #os.path.join(config["scratchDir"], config["tempDir"], "individualSignaturesDone.txt"),
        #os.path.join(config["scratchDir"], config["tempDir"], "consensusSignaturesDone.txt"),
        os.path.join(config["scratchDir"], config["tempDir"], "reverse_signature_finding_done.txt")
        #
        #
        #os.path.join(config["scratchDir"], config["tempDir"], "tSNE_Done.txt"),
        ##expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["GWAS"], '{tissue}-{maf}_pvals.txt'), tissue = TISSUES, maf = MAF)
        #expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["root"], 'expressionAssociation', '{tissue}', '{maf}', 'significant.txt.gz'), tissue = TISSUES, maf = MAF),
        #expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["root"], 'expressionAssociation', '{tissue}', '{maf}', 'nonSignificant.txt.gz'), tissue = TISSUES, maf = MAF),
        #expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["root"], 'expressionAssociation', '{tissue}', '{maf}', 'GO.txt'), tissue = TISSUES, maf = MAF)
        # Get PDFs per tissue per maf
        #expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationSignaturesNMF"], '{tissue}-{maf}_probabilityDistribution.pdf'), tissue=TISSUES, maf = MAF),
        #os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{maf}_W.txt')
        # Perform NMF simulations
        #expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationSignaturesNMF"], '{tissue}-{maf}_W.txt'), tissue=TISSUES, maf = MAF)
        # Merge context from different samples
        #expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationMatrix"], '{tissue}-{maf}.txt'), tissue=TISSUES, maf = MAF)
        # Create exomeOligonucleotideCounts
        #os.path.join(config["auxiliaryFiles"]["genomeFolder"], "".join([os.path.basename(config["exomeFasta"]), "_oligoFreq_n", config["contextLength"]]))

rule all_individualSignatures:
    input: 
        # Finding signatures
        expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationSignaturesNMF"], '{tissue}-{maf}_probabilityDistribution.pdf'), tissue=TISSUES, maf = MAF),
        # Similarity to cancer signatures
        expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationSignaturesNMF"], '{tissue}-{maf}_cancer_similarity.txt'), tissue=TISSUES, maf = MAF)
    output:
        temp(os.path.join(config["scratchDir"], config["tempDir"], "individualSignaturesDone.txt"))
    shell:
        "echo 'Done' > {output}"

rule all_consensusSignatures:  
    input:
        expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_probabilityDistribution.pdf'), mafCons = MAF),
        expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_cancerSimilarity.txt'), mafCons = MAF),
        expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_correspondanceSignatures.txt'), mafCons = MAF),
        expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_presenceSignatures.txt'), mafCons = MAF),
        expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_presenceSignatures.pdf'), mafCons = MAF),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], 'cancerSignatures.pdf'),
        expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationSignaturesNMF"], '{tissue}-{mafCons}_H_consensus.txt'), mafCons = MAF, tissue=TISSUES )
        
    output:
        temp(os.path.join(config["scratchDir"], config["tempDir"], "consensusSignaturesDone.txt"))
    shell:
        "echo 'Done' > {output}" 
        

rule all_reverse_signature_finding:  
    input:
        expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["root"], 'reverse_cancer_signatures', '{tissue}-{mafCons}_H_cancer_signatures.txt'), tissue = TISSUES, mafCons = MAF),
        expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["root"], 'reverse_cancer_signatures_cors', '{tissue}-{mafCons}_H_cancer_signatures.txt'), tissue = TISSUES, mafCons = MAF),
        expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["root"], 'reverse_cancer_signatures_kucab_cors', '{tissue}-{mafCons}_H_cancer_signatures.txt'), tissue = TISSUES, mafCons = MAF) 
    output:
        temp(os.path.join(config["scratchDir"], config["tempDir"], "reverse_signature_finding_done.txt"))
    shell:
        "echo 'Done' > {output}" 

rule all_tSNE:
    input:
        expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["tSNE"], 'n6_context_{context}_original_scatterMut.pdf'), context = [1,3,5]),
        expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["tSNE"], 'n6_context_{context}_normalized_scatterMut.pdf'), context = [1,3,5]),
        expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["tSNE"], 'n6_context_{context}_countsOnly_scatterMut.pdf'), context = [1,3,5]),
        expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["tSNE"], 'n6_context_{context}_geneExpression_scatterMut.pdf'), context = [1,3,5])
    output:
        temp(os.path.join(config["scratchDir"], config["tempDir"], "tSNE_Done.txt"))
    shell:
        "echo 'Done' > {output}"
        
        
        
        
        
        
#--------------------------
# RULES FOR PER TISSUE MUTATION SIGNATURES
rule create_mutationMatrix:
    input:
        os.path.join(config["projectDir"], config["mutationCountDir"]["context"], '{tissue}', '{maf}/')
    output:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationMatrix"], '{tissue}-{maf}.txt')
    shell:
        'files="$(ls {input}*txt)"; bin/mergeByColumn.sh $files > {output}'

rule create_exomeOligonucleotideCounts: 
    input:
        fasta = config["exomeFasta"]
    params:
        contextLength = config["contextLength"]
    output:
        os.path.join(config["auxiliaryFiles"]["genomeFolder"], "".join([os.path.basename(config["exomeFasta"]), "_oligoFreq_n", config["contextLength"]]))
    shell:
        'module load R/3.4.0; Rscript R/oligonucleotideFreqFromFasta.r {params} {input} {output}'

rule run_signatures_NMF:
    input:
        oligonucleotideCounts = ancient(os.path.join(config["auxiliaryFiles"]["genomeFolder"], "".join([os.path.basename(config["exomeFasta"]), "_oligoFreq_n", config["contextLength"]]))),
        mutationCounts = ancient(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationMatrix"], '{tissue}-{maf}.txt'))
    params:
        nRuns = config["mutationSignatureOptions"]["nRuns"],
        nSignatures = config["mutationSignatureOptions"]["nSignatures"],
        discoverSign = "TRUE",
        contextLength = config["contextLength"],
        useMutationFrequency = config["mutationSignatureOptions"]["mutationFrequency"],
        normilizeOligoCount = config["mutationSignatureOptions"]["oligonucleotideNorm"],
        nCores = 8, 
        clusterWorkingDir = lambda wildcards: os.path.join(config["mutationSignatureOptions"]["clusterFolder"], wildcards.tissue, wildcards.maf)
        
    output:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationSignaturesNMF"], '{tissue}-{maf}_W.txt'),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationSignaturesNMF"], '{tissue}-{maf}_H.txt'),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationSignaturesNMF"], '{tissue}-{maf}_simulations.pdf')
    shell:
        '''
        module load R/3.4.0
        Rscript R/mutationSignatures/mutationSignaturesNMF.r {params} {input} {output}
        '''

rule plot_mutationSignatures:
    input:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationSignaturesNMF"], '{tissue}-{maf}_W.txt')
    output:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationSignaturesNMF"], '{tissue}-{maf}_probabilityDistribution.pdf')
    shell:
        '''
        module load R/3.4.0
        Rscript R/mutationSignaturesProbPlot.r {input} {output}
        '''
        
rule find_cancerSignatures_individual_tissues:
    ''' Finds the most similar cancer signature to discovered signatures'''
    input:
        config["auxiliaryFiles"]["cancerSignaturesStandard"],
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationSignaturesNMF"], '{tissue}-{maf}_W.txt')
    
    params:
        permutations = 10000
        
    output:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationSignaturesNMF"], '{tissue}-{maf}_cancer_similarity.txt')
        
    shell:
        '''
        module load R/3.4.0
        Rscript R/signatureCancerSimilarity.R {input} {params} > {output}
        '''
 
#--------------------------
# RULES FOR SIGNATURE SIMILARITY TO CHEMICALS FROM KUCAB

rule all_kucab:
    input: 
        #Kucab signatures
        expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["root"], 'kucab_signatures', '{tissue}-{maf}_kucab_similarity.txt'), tissue = TISSUES, maf = MAF),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["root"], 'kucab_signatures', 'kucab_signatures.pdf')
    output:
        temp(os.path.join(config["scratchDir"], config["tempDir"], "kucabSignaturesDone.txt"))
    shell:
        "echo 'Done' > {output}"

rule standardize_kucab_signatures:
    input:
        os.path.join(config["auxiliaryFiles"]["dir"], "Mutagen53_sub_signature.txt")
    output:
        os.path.join(config["auxiliaryFiles"]["dir"], "Mutagen53_sub_signature_kucab_standard.txt")
    shell:
        '''
        module load R/3.4.0
        cd R
        Rscript cancerSignatureStandardization_kucab_etal.R {input} {output}
        '''
        
rule plot_kucabSignatures:
    input:
        os.path.join(config["auxiliaryFiles"]["dir"], "Mutagen53_sub_signature_kucab_standard.txt")
    output:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["root"], 'kucab_signatures', 'kucab_signatures.pdf')
    shell:
        '''
        module load R/3.4.0
        cd R
        Rscript mutationSignaturesProbPlot.r {input} {output}
        '''
        
rule find_kucab_signatures_individual_tissues:
    ''' Finds the most similar cancer signature to discovered signatures'''
    input:
        os.path.join(config["auxiliaryFiles"]["dir"], "Mutagen53_sub_signature_kucab_standard.txt"),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationSignaturesNMF"], '{tissue}-{maf}_W.txt')
    params:
        permutations = 10000
        
    output:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["root"], 'kucab_signatures', '{tissue}-{maf}_kucab_similarity.txt')
        
    shell:
        '''
        module load R/3.4.0
        Rscript R/signatureCancerSimilarity.R {input} {params} > {output}
        '''
    
        

#--------------------------
# RULES FOR CONSENSUS MUTATION SIGNATURES
rule create_consensusSignatures:
    input:
        [os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationSignaturesNMF"], i + '-{mafCons}_W.txt') for i in TISSUES]
    output:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_heatmap.pdf'),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_dendrogram.pdf'),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_consensusSignatures.txt'),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_presenceSignatures.txt'),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_presenceSignatures.pdf'),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_correspondanceSignatures.txt')
    params:
        prefixOut = lambda wildcards: os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], wildcards.mafCons),
        cutHeight = 0.15
        
    shell:
        '''
        module load R/3.4.0
        Rscript R/signatureAgregation.R {params} {input}
        '''

rule plot_consensusSignatures:
    input:
        W = os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_consensusSignatures.txt')
        # This is here just to run the cancer similarity pipeline
        #cancer =  os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_cancerSimilarity.txt') 
    output:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_probabilityDistribution.pdf')
    shell:
        '''
        module load R/3.4.0
        Rscript R/mutationSignaturesProbPlot.r {input.W} {output}
        '''

rule download_cancerSignatures:
    output:
        config["auxiliaryFiles"]["cancerSignatures"]
    shell:
        'wget http://cancer.sanger.ac.uk/cancergenome/assets/signatures_probabilities.txt -O {output}'
        
rule standarize_cancerSignatures:
    input:
        config["auxiliaryFiles"]["cancerSignatures"]
    output:
        os.path.join(config["auxiliaryFiles"]["cancerSignaturesStandard"])
    shell:
        '''
        module load R/3.4.0
        cd R
        Rscript cancerSignatureStandardization.R {input} {output}
        '''
        
rule plot_cancerSignatures:
    input:
        os.path.join(config["auxiliaryFiles"]["cancerSignaturesStandard"])
    output:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], 'cancerSignatures.pdf')
    shell:
        '''
        module load R/3.4.0
        cd R
        Rscript mutationSignaturesProbPlot.r {input} {output}
        '''
    

rule find_cancerSignatures:
    ''' Finds the most similar cancer signature to discovered signatures'''
    input:
        config["auxiliaryFiles"]["cancerSignaturesStandard"],
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_consensusSignatures.txt')
    
    params:
        permutations = 100000
        
    output:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_cancerSimilarity.txt')
        
    shell:
        '''
        module load R/3.4.0
        Rscript R/signatureCancerSimilarity.R {input} {params} > {output}
        '''

rule create_H_matrix_from_consensus:
    input:
        ancient(os.path.join(config["auxiliaryFiles"]["genomeFolder"], "".join([os.path.basename(config["exomeFasta"]), "_oligoFreq_n", config["contextLength"]]))),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_consensusSignatures.txt'),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["consensusMutationSignatures"], '{mafCons}_presenceSignatures.txt'),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationMatrix"], '{tissue}-{mafCons}.txt')
    params:
        contextLength = config["contextLength"],
        normilizeOligoCount = config["mutationSignatureOptions"]["oligonucleotideNorm"]
    output:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationSignaturesNMF"], '{tissue}-{mafCons}_H_consensus.txt')
    shell:
        """
        module load R/3.4.0
        cd R/mutationSignatures/
        Rscript fitMutationSignatures_NNLS.R {params} {input} {output}
        """
        
        
        
        
#--------------------------
# RULES FOR tSNE analyses
rule create_GTFkmerCount:
    params:
        lambda wildcards: wildcards.context,
        config["auxiliaryFiles"]["GTF_gtex"],
        config["genomeFasta"]
    output:
        os.path.join(config["auxiliaryFiles"]["dir"], "GTF_gtex_oligoCounts_{context}.txt")
    shell:
        '''
        cd R
        module load R/3.4.0
        module load mariadb/10.2.11
        Rscript oligonucleotideGTF.R {params} {output}
        '''

rule perform_tSNE:
    input:
        oligoCounts = os.path.join(config["auxiliaryFiles"]["dir"], "GTF_gtex_oligoCounts_{context}.txt"),
        mutationTables = expand(os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationMatrix"], '{tissue}-{maf}.txt'),  tissue=TISSUES, maf = MAF)
    output:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["tSNE"], 'n6_context_{context}_original_scatterMut.pdf'),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["tSNE"], 'n6_context_{context}_normalized_scatterMut.pdf'),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["tSNE"], 'n6_context_{context}_countsOnly_scatterMut.pdf'),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["tSNE"], 'n6_context_{context}_geneExpression_scatterMut.pdf')
    params:
        context = lambda wildcards: wildcards.context, 
        prefix = os.path.join(config["projectDir"], config["mutationSignaturesDir"]["tSNE"], 'n6')
    shell:
        '''
        cd R
        module load R/3.4.0
        Rscript mutationProfileTSNE.R {params} {input}
        '''
        
#--------------------------
# RULES FOR GWAS

rule run_mutationSignatureGWAS:
    input:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationSignaturesNMF"], '{tissue}-{maf}_H_consensus.txt')
    params:
        permutations = "1000",
        vcfFile = config["vcfFileCommon"],
        prefix = lambda wildcards: os.path.join(config["projectDir"], config["mutationSignaturesDir"]["GWAS"], wildcards.tissue + '-' + wildcards.maf)
    output: 
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["GWAS"], '{tissue}-{maf}_pvals.txt')
    shell:
        '''
        cd R
        module load R/3.4.0
        module load mariadb/10.2.11
        Rscript mutationSignaturesGWAS.R {input} {params}
        '''
        
rule run_mutationSignature_expressionAssociation:
    input:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationSignaturesNMF"], '{tissue}-{maf}_H_consensus.txt')
    params:
        pval_bonf = "0.05"
    output: 
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["root"], 'expressionAssociation', '{tissue}', '{maf}', 'significant.txt.gz'),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["root"], 'expressionAssociation', '{tissue}', '{maf}', 'nonSignificant.txt.gz'),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["root"], 'expressionAssociation', '{tissue}', '{maf}', 'GO.txt')
    shell:
        '''
        cd R
        module load R/3.4.0
        Rscript signature_RNAexpression_association.R {params} {input} {output}
        '''
        
#--------------------------
## RULES FOR REVERSE MUTATION CALLING
# This goes from cancer signature to see how much
# of each cancer signature contributes to each of my samples

rule run_signature_weigth_discovery:
    input:
        ancient(os.path.join(config["auxiliaryFiles"]["genomeFolder"], "".join([os.path.basename(config["exomeFasta"]), "_oligoFreq_n", config["contextLength"]]))),
        os.path.join(config["auxiliaryFiles"]["dir"], "cancerSignaturesStandard.txt"),
        os.path.join(config["auxiliaryFiles"]["dir"], "cancerSignatures_presence.txt"),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationMatrix"], '{tissue}-{mafCons}.txt')
    params:
        contextLength = config["contextLength"],
        normilizeOligoCount = config["mutationSignatureOptions"]["oligonucleotideNorm"]
    output:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["root"], 'reverse_cancer_signatures', '{tissue}-{mafCons}_H_cancer_signatures.txt')
    shell:
        """
        module load R/3.4.0
        cd R/mutationSignatures/
        Rscript fitMutationSignatures_NNLS.R {params} {input} {output}
        """

rule run_signature_weigth_discovery_cors:
    input:
        ancient(os.path.join(config["auxiliaryFiles"]["genomeFolder"], "".join([os.path.basename(config["exomeFasta"]), "_oligoFreq_n", config["contextLength"]]))),
        os.path.join(config["auxiliaryFiles"]["dir"], "cancerSignaturesStandard.txt"),
        os.path.join(config["auxiliaryFiles"]["dir"], "cancerSignatures_presence.txt"),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationMatrix"], '{tissue}-{mafCons}.txt')
    params:
        contextLength = config["contextLength"],
        normilizeOligoCount = config["mutationSignatureOptions"]["oligonucleotideNorm"]
    output:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["root"], 'reverse_cancer_signatures_cors', '{tissue}-{mafCons}_H_cancer_signatures.txt')
    shell:
        """
        module load R/3.4.0
        cd R/mutationSignatures/
        Rscript fitMutationSignatures_correlations.R {params} {input} {output}
        """
        
rule run_signature_weigth_discovery_cors_kucab:
    input:
        ancient(os.path.join(config["auxiliaryFiles"]["genomeFolder"], "".join([os.path.basename(config["exomeFasta"]), "_oligoFreq_n", config["contextLength"]]))),
        os.path.join(config["auxiliaryFiles"]["dir"], "Mutagen53_sub_signature_kucab_standard.txt"),
        os.path.join(config["auxiliaryFiles"]["dir"], "cancerSignatures_presence.txt"),
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["mutationMatrix"], '{tissue}-{mafCons}.txt')
    params:
        contextLength = config["contextLength"],
        normilizeOligoCount = config["mutationSignatureOptions"]["oligonucleotideNorm"]
    output:
        os.path.join(config["projectDir"], config["mutationSignaturesDir"]["root"], 'reverse_cancer_signatures_kucab_cors', '{tissue}-{mafCons}_H_cancer_signatures.txt')
    shell:
        """
        module load R/3.4.0
        cd R/mutationSignatures/
        Rscript fitMutationSignatures_correlations.R {params} {input} {output}
        """


